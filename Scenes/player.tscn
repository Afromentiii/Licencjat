[gd_scene load_steps=15 format=3 uid="uid://b5b6ue2mtp10h"]

[ext_resource type="Texture2D" uid="uid://vjh6tf1p0ivg" path="res://Images/Player/ham.png" id="1_f5gg4"]
[ext_resource type="Texture2D" uid="uid://c025oeg7qnj05" path="res://Images/Player/test.png" id="2_tnck4"]
[ext_resource type="Texture2D" uid="uid://c7nttvm4xgmuj" path="res://Images/Player/left2.png" id="3_mwvfn"]
[ext_resource type="Texture2D" uid="uid://d1raj3l4p0v5n" path="res://Images/Player/left.png" id="4_p6upc"]

[sub_resource type="GDScript" id="GDScript_5cbp6"]
script/source = "extends CharacterBody2D

const SPEED = 300.0
const JUMP_VELOCITY = -400.0

@onready var healthBar = $healthBar

var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")
var lastDirection : float = -2
var deaths : int = 0
var respawnPosition = Vector2(10,10)
var direction = 0

var is_dead : bool = false
var is_moving_right : bool = false
var is_jumping : bool = false
var is_stacked : bool = false

var reward = 0
var previous_pos_x = 0
var move_end_pos_x = 0
var iter_stacked_counter = 0
var moves = []
var playerID = -1
var summmed_Timers
var distance_after_death : int = 0

var pos_x = 0
var life = Callable(self, \"live\")
var loading = Callable(self,\"just_load_and_execute_moves\")
var t : Thread

func just_load_and_execute_moves():
	for i in moves:
		move(i)
		await get_tree().create_timer(1.75).timeout
	moves.clear()
	
	is_dead = true
	t.wait_to_finish()

func move_reward(move : int):
	if move == 0:
		reward += 5
	elif move == 1:
		reward += 25
	elif move == 2:
		reward += 50
	elif move == 3:
		reward += 5
	elif move == 4:
		reward += 25
	elif move == 5:
		reward += 50
	elif move == 5:
		reward += 75

func move(move : int):
	#index_short_right = 0
	#index_mid_right = 1
	#index_high_right = 2
	
	#index_short_jump = 3
	#index_mid_jump = 4
	#index_high_jump = 5
	
	#do_nothing = 6
	if move == 0:
		is_moving_right = true
		await get_tree().create_timer(0.1).timeout
		is_moving_right = false
	elif move == 1:
		is_moving_right = true
		await get_tree().create_timer(0.25).timeout
		is_moving_right = false
	elif move == 2:
		is_moving_right = true
		await get_tree().create_timer(0.5).timeout
		is_moving_right = false
	elif move == 3:
		is_jumping = true
		is_moving_right = true
		await get_tree().create_timer(0.1).timeout
		is_moving_right = false
	elif move == 4:
		is_jumping = true
		is_moving_right = true
		await get_tree().create_timer(0.25).timeout
		is_moving_right = false
	elif move == 5:
		is_jumping = true
		is_moving_right = true
		await get_tree().create_timer(0.5).timeout
		is_moving_right = false
	elif move == 6:
		is_jumping = true
		is_moving_right = true
		await get_tree().create_timer(0.75).timeout
		is_moving_right = false		
		
func print_gen_data():
	print(\"Player distance is: \" + str(distance_after_death) + \" Player id is: \" + str(playerID)+ \" Reward is: \" + str(reward) + \" Executed moves are: \" + str(moves))

func live():
	if moves.is_empty() == false:
		for move in moves:
			previous_pos_x = pos_x
			move(move)
			await get_tree().create_timer(1.75).timeout
			move_end_pos_x = pos_x
			
			if move_end_pos_x > previous_pos_x:
				move_reward(move)
	
	if is_dead == false:
		while true:
			var move = randi_range(1,6)
			previous_pos_x = pos_x
			moves.append(move)

			move(move)
			await get_tree().create_timer(1.75).timeout
		
			move_end_pos_x = pos_x
			
			if move_end_pos_x > previous_pos_x:
				distance_after_death += abs(respawnPosition.distance_to(Vector2(move_end_pos_x, 0)))
				move_reward(move)
				iter_stacked_counter = 0
			else:
				iter_stacked_counter += 1
				reward -= 5
				if iter_stacked_counter == 5:
					reward -= 200
					respawn()
			
			if is_dead == true:
				break
				
	t.wait_to_finish()
			
func _ready():
	self.position = get_parent().spawnPos
	
func endGame():
	reward = 999999
	await get_tree().create_timer(0.75).timeout
	respawn()

func respawn():
	self.is_dead = true
	healthBar.value = 100
	self.position = respawnPosition
	self.is_jumping = false
	self.is_moving_right = false
	print_gen_data()
	
	self.move_end_pos_x = 0
	self.previous_pos_x = 0
	self.distance_after_death = 0

	
func enemyDMG():
	$healthBar.value -= 30
	velocity.y = -300
	
func lavaColumn_dmg() -> void:
	$healthBar.value -= 40
	velocity.y = -250
	self.position.x -= 80 * direction

func blackMatter_dmg() -> void:
	$healthBar.value -= 100
	reward -= 300

func hugeJump() -> void:
	velocity.y = -650

func spike_dmg() -> void:
	$healthBar.value -= 10
	velocity.y = JUMP_VELOCITY
	reward -= 5
	
func lava_dmg() -> void:
	$healthBar.value -= 25
	velocity.y = JUMP_VELOCITY
	
func _physics_process(delta):
	
	if healthBar.value <= 0:
		respawn()
	
	pos_x = position.x
	
	if not is_on_floor():
		velocity.y += gravity * delta

	if is_jumping and is_on_floor() and is_dead == false:
		velocity.y = JUMP_VELOCITY
		is_jumping = false

	direction = Input.get_axis(\"left\", \"right\")
	if is_moving_right == true and is_dead == false:
		velocity.x = 1 * SPEED
		$AnimatedSprite2D.play(\"runR\")
		lastDirection = 1
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
	

	move_and_slide()


"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ch4m3"]
size = Vector2(24.6641, 13.3589)

[sub_resource type="AtlasTexture" id="AtlasTexture_rs0ma"]
atlas = ExtResource("1_f5gg4")
region = Rect2(32, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_g54lw"]
atlas = ExtResource("2_tnck4")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_fs53v"]
atlas = ExtResource("3_mwvfn")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_x7eme"]
atlas = ExtResource("4_p6upc")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_juwd0"]
atlas = ExtResource("2_tnck4")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_h7rhu"]
atlas = ExtResource("2_tnck4")
region = Rect2(64, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_douyf"]
atlas = ExtResource("2_tnck4")
region = Rect2(96, 0, 32, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_dety7"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_rs0ma")
}],
"loop": true,
"name": &"defaultL",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_g54lw")
}],
"loop": true,
"name": &"defaultR",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_rs0ma")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fs53v")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_x7eme")
}],
"loop": true,
"name": &"runL",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_juwd0")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_h7rhu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_douyf")
}],
"loop": true,
"name": &"runR",
"speed": 5.0
}]

[node name="Player" type="CharacterBody2D"]
collision_layer = 2
collision_mask = 5
script = SubResource("GDScript_5cbp6")

[node name="CollwisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0.167969, -5.6795)
shape = SubResource("RectangleShape2D_ch4m3")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(0, -14)
sprite_frames = SubResource("SpriteFrames_dety7")
animation = &"defaultL"

[node name="healthBar" type="ProgressBar" parent="."]
modulate = Color(0.227451, 0.909804, 0, 1)
offset_left = -14.0
offset_top = -17.0
offset_right = 14.0
offset_bottom = -13.0
value = 100.0
show_percentage = false

[node name="Index" type="RichTextLabel" parent="."]
offset_left = -8.0
offset_top = -36.0
offset_right = 12.0
offset_bottom = -13.0
fit_content = true
